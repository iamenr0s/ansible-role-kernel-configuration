---

- name: Ensure sysctl.d directory exists
  ansible.builtin.file:
    path: /etc/sysctl.d
    state: directory
    mode: '0755'

- name: Determine effective kernel parameters for this host
  ansible.builtin.set_fact:
    kernel_parameters_effective: >-
      {{ (kernel_parameters_common | default({}))
         | combine(
             (kernel_parameters_major_map[ansible_distribution][ansible_distribution_major_version]
              | default({})),
             recursive=True
           )
      }}

- name: Detect container virtualization
  ansible.builtin.set_fact:
    kernel_in_container: >-
      {{ (ansible_virtualization_type | default(''))
         in ['docker', 'podman', 'container', 'containerd']
         or (ansible_virtualization_role | default('')) == 'guest' }}

- name: Determine reload behavior for this host
  ansible.builtin.set_fact:
    kernel_reload_effective: >-
      {{ kernel_parameters_reload_in_containers if kernel_in_container
         else kernel_parameters_reload }}

- name: Apply kernel parameters via sysctl (persistent)
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: "{{ kernel_parameters_sysctl_file }}"
    reload: "{{ kernel_reload_effective }}"
    sysctl_set: "{{ not kernel_in_container }}"
    ignoreerrors: "{{ kernel_parameters_sysctl_ignoreerrors }}"
  environment:
    PATH: "{{ kernel_env_path }}"
  loop: "{{ kernel_parameters_effective | dict2items }}"
  when: kernel_parameters_effective | length > 0
  notify: Reload sysctl

# Kernel modules management

- name: Load and persist kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    params: "{{ (kernel_modules_options[item] | default({})) | items | map('join', '=') | join(' ') }}"
    persistent: "{{ 'present' if kernel_modules_persistent else 'disabled' }}"
  loop: "{{ kernel_modules_load }}"
  when: kernel_modules_load | length > 0

- name: Blacklist kernel modules
  community.general.kernel_blacklist:
    name: "{{ item }}"
    state: present
    blacklist_file: "{{ kernel_modules_blacklist_file }}"
  loop: "{{ kernel_modules_blacklist }}"
  when: kernel_modules_blacklist | length > 0

- name: Unload blacklisted modules if currently loaded
  community.general.modprobe:
    name: "{{ item }}"
    state: absent
  loop: "{{ kernel_modules_blacklist }}"
  when: kernel_modules_blacklist | length > 0
